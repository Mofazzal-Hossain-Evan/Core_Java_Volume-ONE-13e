import java.io.IOException;
import java.io.PrintWriter;
import java.nio.charset.StandardCharsets;
import java.nio.file.Path;
import java.util.Scanner;


public class FileIOExample {


    public static void main(String[] args) throws IOException {
        String currentDir = System.getProperty("user.dr");
        System.out.println("urrent directory: " + currentDir);

        Path inputPath = Path.of("input.txt");
        Path outputPath = Path.of("output.txt");

        try (PrintWriter writer = new PrintWriter(outputPath.toString(), StandardCharsets.UTF_8)) {
            writer.println("This is a sample text file.");
            writer.println("It contains multiple lines.");
            writer.printf("Generated by %s.%n", "FileIOExample");
        }
        System.out.println("Data written to " + outputPath);

        try (Scanner scanner = new Scanner(inputPath, StandardCharsets.UTF_8)) {
            System.out.println("\nReading data from " + inputPath + ":");

            while (scanner.hasNextLine()) {
                String line = scanner.nextLine();
                System.out.println(line);
            }
        } catch (IOException e) {
            System.out.println("Error reading from file: " + e.getMessage());
        }

        String sampleData = "Hello World! 12345";
        try (Scanner stringScanner = new Scanner(sampleData)) {
            System.out.println("\nReading from a string:");
            while (stringScanner.hasNext()){

                /**
                 *The hasNextLine() method is part of the Scanner class in Java.
                 * It checks if there is another line of input available to read. Specifically,
                 * it returns true if the scanner has another line of input, and false otherwise.
                 *
                 * Key Points:
                 * Use Case: It is typically used in a loop to iterate over each line of a file or other input source.
                 * Behavior: When hasNextLine() returns true, you can safely call the nextLine() method to read the next line of input.
                 * Input Source: It works with any input source supported by Scanner, such as files, strings, or system input.
                 */
                System.out.println("Token: " + stringScanner.next());
            }
        }
        try (PrintWriter writer = new PrintWriter("Redirect_output.txt", StandardCharsets.UTF_8)) {
            writer.println("File redirection example.");
            writer.println("This data would simulate > redirection.");
        }
        System.out.println("Redirection example written to redirect_output.txt");

        try(Scanner scanner = new Scanner(Path.of("nonexistent.txt"), StandardCharsets.UTF_8)) {
            System.out.println(scanner.nextLine());
        } catch (IOException e
        /**
         * The (IOException e) is part of the catch block in Java's try-catch construct.
         * It declares a variable e of type IOException, which represents the exception that is caught
         * when something goes wrong in the try block.
         */
        ) {
            System.err.println("Handled exception: " + e.getMessage());
        }

        System.out.println("Program completed successfully.");

    }
}
