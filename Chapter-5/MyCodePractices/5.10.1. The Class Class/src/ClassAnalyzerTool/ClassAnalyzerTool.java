package ClassAnalyzerTool;

import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.util.Scanner;

public class ClassAnalyzerTool {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("ЁЯФН ржХрзНрж▓рж╛рж╕рзЗрж░ ржкрзВрж░рзНржг ржирж╛ржо рж▓рж┐ржЦрзБржи (ржпрзЗржоржи: java.util.ArrayList): ");
        String className = scanner.nextLine();

        try{
            Class<?> cls = Class.forName(className);
            System.out.println("\nЁЯУШ ржХрзНрж▓рж╛рж╕ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг: " +cls.getName());

            Package pkg = cls.getPackage();
            System.out.println("ЁЯУж ржкрзНржпрж╛ржХрзЗржЬ: " + (pkg != null ? pkg.getName() : "ржбрж┐ржлрж▓рзНржЯ ржкрзНржпрж╛ржХрзЗржЬ"));

            // рж╕рзБржкрж╛рж░ржХрзНрж▓рж╛рж╕
            Class<?>  superClass = cls.getSuperclass();
            System.out.println("ЁЯзм рж╕рзБржкрж╛рж░ржХрзНрж▓рж╛рж╕: "  +(superClass != null ? superClass.getName() :"ржирзЗржЗ" ));
            //"ржпржжрж┐ superClass null ржирж╛ рж╣рзЯ, рждрж╛рж╣рж▓рзЗ superClass.getName() ржлрзЗрж░ржд ржжрж╛ржУред ржирзЯрждрзЛ 'ржирзЗржЗ' рж▓рзЗржЦрзЛред"

            // ржЗржирзНржЯрж╛рж░ржлрзЗрж╕
            Class<?>[] interfaces = cls.getInterfaces();
            System.out.println("ЁЯФЧ ржЗржирзНржЯрж╛рж░ржлрзЗрж╕:");
            for (Class<?> iface : interfaces) {
                System.out.println(" - " + iface.getName());
            }

            // ржлрж┐рж▓рзНржбрж╕ржорзВрж╣
            Field[] fields = cls.getDeclaredFields();
            System.out.println(" ржлрж┐рж▓рзНржбрж╕ржорзВрж╣");
            for (Field field : fields){
                System.out.println("  - " + Modifier.toString(field.getModifiers()) + " " +
                        field.getType().getSimpleName() +""+ field.getName());
            }

            // ржХржирж╕рзНржЯрзНрж░рж╛ржХрзНржЯрж░рж╕ржорзВрж╣
            Constructor<?>[] constructors = cls.getDeclaredConstructors();
            System.out.println("  ржХржирж╕рзНржЯрзНрж░рж╛ржХрзНржЯрж░рж╕ржорзВрж╣");
            for (Constructor<?> constructor : constructors) {
                System.out.println(" _ " + Modifier.toString(constructor.getModifiers()) +" " +
                        constructor.getName() +"(");
                Class<?>[] paramTypes = constructor.getParameterTypes();
                for (int i = 0; i < paramTypes.length; i++) {
                    System.out.println(paramTypes[i].getName());
                    if (i < paramTypes.length- 1) System.out.println(", ");
                }
                System.out.println(")");
            }

            //тЪЩя╕П ржорзЗржержбрж╕ржорзВрж╣:
            Method[] methods = cls.getDeclaredMethods();
            System.out.println("тЪЩя╕П ржорзЗржержбрж╕ржорзВрж╣:");
            for (Method method : methods){
                System.out.println(" -" + Modifier.toString(method.getModifiers()) + " " +
                        method.getReturnType().getSimpleName() + " " +
                        method.getName() + "(");
                Class<?>[] paramTypes = method.getParameterTypes();
                for (int i = 0; i< paramTypes.length; i ++){
                    System.out.println(paramTypes[i].getSimpleName());
                    if (i < paramTypes.length - 1)
                        System.out.println(",");
                }
                System.out.println(")");
            }


        } catch (ClassNotFoundException e ){
            System.out.println("тЭМ ржХрзНрж▓рж╛рж╕ ржЦрзБржБржЬрзЗ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐: " + className);
        } catch (Exception e){
            System.out.println("тЭМ ржПржХржЯрж┐ рждрзНрж░рзБржЯрж┐ ржШржЯрзЗржЫрзЗ:");
            e.printStackTrace();
        } finally {
            {
                scanner.close();
            }
        }
    }
}
