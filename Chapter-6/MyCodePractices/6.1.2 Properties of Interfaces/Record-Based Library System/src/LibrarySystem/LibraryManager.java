package LibrarySystem;

import java.util.*;

/*
 * =========================
 * [From Core Java, Ch 8]
 * Demonstrates polymorphic behavior, instanceof pattern matching,
 * Java Streams for filtering and sorting, and dynamic behavior checking.
 * =========================
 */
public class LibraryManager {
    public static void main(String[] args) {

        // Holds various library items: Books, Magazines, DVDs
        List<Object> items = new ArrayList<>();

        items.add(new BookRecord("Effective Java", "Joshua Bloch"));
        items.add(new MagazineRecord("National Geographic", 202));
        items.add(new DVDRecord("Inception", 148));
        items.add(new BookRecord("Java Concurrency", "Brian Goetz"));

        // --- Display all items ---
        System.out.println("üìö Library Items:");
        for (Object item : items) {
            System.out.println(item); // toString() auto-generated by record
        }

        // --- Search by title ---
        System.out.println("\nüîç Searching for title containing 'java':");
        for (Object item : items) {
            if (item instanceof Searchable searchable && searchable.searchByTitle("java")) {
                System.out.println("Found: " + item);
            }
        }

        // --- Borrow items if possible ---
        System.out.println("\nüì¶ Borrowing and Returning Items:");
        for (Object item : items) {
            if (item instanceof Borrowable borrowable) {
                borrowable.borrow();
                borrowable.returnItem();
                System.out.println("Max allowed days: " + Borrowable.MAX_BORROW_DAYS);
            } else {
                System.out.println("Not borrowable: " + item);
            }
        }
    }
}
